{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;AAAA,IAAI,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,EAC5B,UAAU,GAAG,OAAO,CAAC,aAAa,CAAC,EACnC,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,EAClB,GAAG,GAAG,OAAO,EAAE,EACf,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,SAAS,EACnC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,sBAAsB,EAC5C,UAAU,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EACrC,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC;AAEpC,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC3B,2DAA4D;AAC5D,0CAAyC;AAEzC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AACtB,aAAa;AACb,EAAE,CAAC,QAAQ,CAAC,oBAAoB,EAAE,MAAM,EAAE,UAAU,GAAG,EAAE,IAAI;IACzD,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAEtB,IAAI,GAAG;QAAE,MAAM,GAAG,CAAC;IAGnB,MAAM,iBAAiB,GAAG,IAAI,qCAAoB,EAAE,CAAC;IACrD,iBAAiB,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IAEpC,SAAS,gBAAgB,CAAC,OAAO,EAAE,QAAQ,EAAE,IAAI;QAC7C,mDAAmD;QACnD,OAAO,CAAC,GAAG,EAAE,CAAC;QACd,IAAI,EAAE,CAAC;IACX,CAAC;IAED,GAAG,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;IAC1B,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAC,CAAC,CAAC,CAAC;IACjD,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;IAC3B,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;IAChB,GAAG,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;IACzB,GAAG,CAAC,GAAG,CAAC,UAAS,GAAG,EAAE,GAAG,EAAE,IAAI;QAC3B,GAAG,CAAC,MAAM,CAAC,6BAA6B,EAAE,GAAG,CAAC,CAAC;QAC/C,GAAG,CAAC,MAAM,CAAC,8BAA8B,EAAE,gDAAgD,CAAC,CAAC;QAC7F,IAAI,EAAE,CAAC;IACX,CAAC,CAAC,CAAC;IAEH,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,eAAW,CAAC,iBAAiB,CAAC,CAAC,CAAC;IAClD,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QACtB,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;IACrB,CAAC,CAAC,CAAA;IACF,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE;QAClB,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAA;IACzC,CAAC,CAAC,CAAC;AAEP,CAAC,CAAC,CAAC","sourcesContent":["var express = require('express'),\r\n    bodyParser = require('body-parser'),\r\n    fs = require('fs'),\r\n    app = express(),\r\n    inContainer = process.env.CONTAINER,\r\n    inAzure = process.env.WEBSITE_RESOURCE_GROUP,\r\n    notDevelop = process.argv.slice(2)[0],\r\n    port = process.env.PORT || 3000;\r\n\r\nvar cors = require('cors');\r\nimport {ArboxScheduleService} from \"./utils/arbox-schedule\";\r\nimport arboxRouter from './routes/arbox';\r\n\r\nconsole.log('before');\r\n// @ts-ignore\r\nfs.readFile(\"src/data/data.json\", \"utf8\", function (err, data) {\r\n    console.log('before');\r\n\r\n    if (err) throw err;\r\n\r\n\r\n    const arboxUserSchedule = new ArboxScheduleService();\r\n    arboxUserSchedule.restoreData(data);\r\n\r\n    function loggerMiddleware(request, response, next) {\r\n        //console.log(`${request.method} ${request.path}`);\r\n        console.log();\r\n        next();\r\n    }\r\n\r\n    app.use(loggerMiddleware);\r\n    app.use(bodyParser.urlencoded({extended: true}));\r\n    app.use(bodyParser.json());\r\n    app.use(cors());\r\n    app.options('*', cors());\r\n    app.use(function(req, res, next) {\r\n        res.header(\"Access-Control-Allow-Origin\", \"*\");\r\n        res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\r\n        next();\r\n    });\r\n\r\n    app.use('/arbox', arboxRouter(arboxUserSchedule));\r\n    app.get('/', (req, res) => {\r\n        res.send('hello')\r\n    })\r\n    app.listen(port, () => {\r\n        console.log('starting on port', port)\r\n    });\r\n\r\n});"]}