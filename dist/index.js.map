{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import fetch from \"node-fetch\";\r\n\r\nvar express = require('express'),\r\n    bodyParser = require('body-parser'),\r\n    fs = require('fs'),\r\n    app = express(),\r\n    inContainer = process.env.CONTAINER,\r\n    inAzure = process.env.WEBSITE_RESOURCE_GROUP,\r\n    notDevelop = process.argv.slice(2)[0],\r\n    port = process.env.PORT || 3000;\r\n\r\nvar cors = require('cors');\r\nimport {ArboxScheduleService, IUser} from \"./utils/arbox-schedule\";\r\nimport arboxRouter from './routes/arbox';\r\n\r\n// @ts-ignore\r\nfs.readFile(`data/data.json`, \"utf8\", function (err, data) {\r\n    console.log('before');\r\n\r\n    if (err) throw err;\r\n\r\n\r\n    const arboxUserSchedule = new ArboxScheduleService();\r\n    arboxUserSchedule.restoreData(data);\r\n\r\n    function loggerMiddleware(request, response, next) {\r\n        //console.log(`${request.method} ${request.path}`);\r\n        console.log();\r\n        next();\r\n    }\r\n\r\n    app.use(loggerMiddleware);\r\n    app.use(bodyParser.urlencoded({extended: true}));\r\n    app.use(bodyParser.json());\r\n    app.use(cors());\r\n    app.options('*', cors());\r\n    app.use(function(req, res, next) {\r\n        res.header(\"Access-Control-Allow-Origin\", \"*\");\r\n        res.header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\r\n        next();\r\n    });\r\n\r\n    app.use('/arbox', arboxRouter(arboxUserSchedule));\r\n\r\n    app.get('/is-user-login', (req, res) => {\r\n        const user: IUser = arboxUserSchedule.getUser(req.headers.accesstoken) as IUser;\r\n        if (user) {\r\n            return res.json(true)\r\n        }\r\n        return res.status(400).send(new Error('must re register'));\r\n    });\r\n\r\n    app.get('/', (req, res) => {\r\n        res.send('hello')\r\n    })\r\n    app.listen(port, () => {\r\n        console.log('starting on port', port)\r\n    });\r\n\r\n    let reqTimer = setTimeout(function wakeUp() {\r\n        if (Object.keys(arboxUserSchedule.schedule).length === 0) {\r\n            console.log('no future schedule')\r\n            return\r\n        }\r\n        console.log('there is shome future schedule ', Object.keys(arboxUserSchedule.schedule).length)\r\n\r\n        fetch(\"https://arbox-register.herokuapp.com\").then(res => {\r\n            console.log(\"WAKE UP DYNO\");\r\n            return reqTimer = setTimeout(wakeUp, 1200000);\r\n        });\r\n    }, 1200000);//1200000);\r\n\r\n\r\n\r\n});\r\nprocess.on('beforeExit', code => {\r\n    // Can make asynchronous calls\r\n    setTimeout(() => {\r\n        console.log(`Process will exit with code: ${code}`)\r\n        process.exit(code)\r\n    }, 100)\r\n})\r\n\r\nprocess.on('exit', code => {\r\n    // Only synchronous calls\r\n    console.log(`Process exited with code: ${code}`)\r\n})\r\nprocess.on('SIGTERM', signal => {\r\n    console.log(`Process ${process.pid} received a SIGTERM signal`)\r\n    process.exit(0)\r\n})\r\n\r\nprocess.on('SIGINT', signal => {\r\n    console.log(`Process ${process.pid} has been interrupted`)\r\n    process.exit(0)\r\n})\r\n"]}