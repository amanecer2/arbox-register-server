{"version":3,"file":"arbox.js","sourceRoot":"","sources":["../../src/routes/arbox.ts"],"names":[],"mappings":";;AAAA,mCAAmC;AAEnC,4DAA2G;AAI3G,MAAM,WAAW,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;AACrC,MAAM,cAAc,GAAG,IAAI,8BAAa,EAAE,CAAC;AAC3C,MAAM,kBAAkB,GAAG,IAAI,qCAAoB,EAAE,CAAC;AAItD,MAAM,MAAM,GAAG,CAAC,iBAAuC,EAAE,EAAE;IACvD,MAAM,aAAa,GAAG,UAAU,OAAO,EAAE,QAAQ,EAAE,IAAI;QACnD,MAAM,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC;QAC1C,IAAI,CAAC,KAAK,EAAE;YACR,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC;YAC1D,OAAM;SACT;QAED,MAAM,IAAI,GAAU,iBAAiB,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,CAAU,CAAC;QAEpF,IAAI,CAAC,IAAI,EAAE;YACP,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC,CAAC;YAC3D,OAAM;SACT;QAED,OAAO,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QAC7B,IAAI,EAAE,CAAC;IACX,CAAC,CAAC;IAEF,WAAW,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QAC5C,MAAM,EAAC,IAAI,EAAC,GAAG,GAAG,CAAC,IAAW,CAAC;QAC/B,MAAM,EAAC,WAAW,EAAE,KAAK,EAAC,GAAG,GAAG,CAAC,OAAc,CAAC;QAEhD,iBAAiB,CAAC,OAAO,CAAC,IAAI,qBAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC,CAAC;QAC9E,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnB,CAAC,CAAC,CAAC;IAEH,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,aAAa,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QACtD,MAAM,EAAC,QAAQ,EAAE,QAAQ,EAAC,GAAG,GAAG,CAAC,IAAI,CAAC;QAGtC,iBAAiB,CAAC,eAAe,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAA;QAErD;;;;;;;;YAQI;QACJ,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAEjB,CAAC,CAAC,CAAC;IACH,WAAW,CAAC,GAAG,CAAC,WAAW,EAAE,aAAa,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QACrD,MAAM,EAAC,QAAQ,EAAC,GAAG,GAAG,CAAC,IAAI,CAAC;QAG5B,MAAM,IAAI,GAAG,iBAAiB,CAAC,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;QAEtE,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAEnB,CAAC,CAAC,CAAC;IAEH,WAAW,CAAC,MAAM,CAAC,uBAAuB,EAAE,aAAa,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QAEpE;;;;;;;;YAQI;QACJ,MAAM,EAAC,UAAU,EAAC,GAAG,GAAG,CAAC,MAAM,CAAC;QAChC,MAAM,EAAC,QAAQ,EAAC,GAAG,GAAG,CAAC,IAAI,CAAC;QAE5B,iBAAiB,CAAC,kBAAkB,CAAO,QAAS,CAAC,MAAM,EAAE,CAAC,UAAU,CAAC,CAAC;QAC1E,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAEjB,CAAC,CAAC,CAAC;IAEH,WAAW,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;QAC9B,GAAG,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,CAAC,EAAC,CAAC,CAAC;QACpB,iBAAiB,CAAC;IACtB,CAAC,CAAC,CAAC;IACH,OAAO,WAAW,CAAC;AACvB,CAAC,CAAC;AACF,kBAAe,MAAM,CAAC","sourcesContent":["import * as express from 'express';\r\nimport {IUserMap} from \"../interface/login.interface\";\r\nimport {ArboxSchedule, ArboxScheduleService, fakeScheduleItem, IUser, User} from \"../utils/arbox-schedule\";\r\nimport {format} from \"date-fns\";\r\nimport {IScheduleItem} from \"../interface/schedule\";\r\n\r\nconst arboxRouter = express.Router();\r\nconst _arboxSchedule = new ArboxSchedule();\r\nconst _arboxUserSchedule = new ArboxScheduleService();\r\n\r\n\r\n\r\nconst router = (arboxUserSchedule: ArboxScheduleService) => {\r\n    const mustHaveToken = function (request, response, next) {\r\n        const token = request.headers.accesstoken;\r\n        if (!token) {\r\n            response.status(401).send(new Error('\\'must have token'));\r\n            return\r\n        }\r\n\r\n        const user: IUser = arboxUserSchedule.getUser(request.headers.accesstoken) as IUser;\r\n\r\n        if (!user) {\r\n            response.status(401).send(new Error('must have register'));\r\n            return\r\n        }\r\n\r\n        request.body.authUser = user;\r\n        next();\r\n    };\r\n\r\n    arboxRouter.post('/register-user', (req, res) => {\r\n        const {user} = req.body as any;\r\n        const {accesstoken: token} = req.headers as any;\r\n\r\n        arboxUserSchedule.setUser(new User(user.userFk, user.membrshipUserFk, token));\r\n        res.json(true);\r\n    });\r\n\r\n    arboxRouter.post('/schedule', mustHaveToken, (req, res) => {\r\n        const {schedule, authUser} = req.body;\r\n\r\n\r\n        arboxUserSchedule.setUserSchedule(authUser, schedule)\r\n\r\n        /**\r\n        const fake: IScheduleItem | any = fakeScheduleItem;\r\n        fake.schedule.date = format(new Date(), 'yyyy-MM-dd');\r\n        fake.schedule.time = format(new Date(), 'HH:mm:ss');\r\n        fake.schedule.enableRegistrationTime = 0;\r\n        arboxSchedule.startSchedule(fake);\r\n         setTimeout(() => {arboxSchedule.removeSchedule(fake)}, 40000);\r\n\r\n         **/\r\n        res.json([]);\r\n\r\n    });\r\n    arboxRouter.get('/schedule', mustHaveToken, (req, res) => {\r\n        const {authUser} = req.body;\r\n\r\n\r\n        const data = arboxUserSchedule.getUserSchedule(authUser.userFk) || [];\r\n\r\n        res.json(data);\r\n\r\n    });\r\n\r\n    arboxRouter.delete('/schedule/:scheduleID', mustHaveToken, (req, res) => {\r\n\r\n        /**\r\n        const fake: IScheduleItem | any = fakeScheduleItem;\r\n        fake.schedule.date = format(new Date(), 'yyyy-MM-dd');\r\n        fake.schedule.time = format(new Date(), 'HH:mm:ss');\r\n        fake.schedule.enableRegistrationTime = 0;\r\n        arboxSchedule.startSchedule(fake);\r\n         setTimeout(() => {arboxSchedule.removeSchedule(fake)}, 40000);\r\n\r\n         **/\r\n        const {scheduleID} = req.params;\r\n        const {authUser} = req.body;\r\n\r\n        arboxUserSchedule.removeUserSchedule((<any>authUser).userFk, +scheduleID);\r\n        res.json([]);\r\n\r\n    });\r\n\r\n    arboxRouter.get('/', (req, res) => {\r\n        res.json({helo: 1});\r\n        arboxUserSchedule;\r\n    });\r\n    return arboxRouter;\r\n};\r\nexport default router;"]}